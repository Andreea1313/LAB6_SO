#include <iostream>
#include <string>
#include <sstream>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <cstring> 
#include <errno.h>
using namespace std;

#define RANGE 1000
#define NUM_PROCESSES 10
#define BUFFER_SIZE 256

bool isPrime(int num) {
    if (num < 2) return false;
    for (int i = 2; i * i <= num; ++i) {
        if (num % i == 0) return false;
    }
    return true;
}

void findPrimesInRange(int start, int end, int writePipe) {
    ostringstream result;
    for (int i = start; i <= end; i++) {
        if (isPrime(i)) {
            result << i << " ";
        }
    }
    result << "*"<<endl;

    string output = result.str();
    write(writePipe, output.c_str(), output.size());
    close(writePipe);
}

int main(int argc, char* argv[]) {
    if (argc == 3) {
        int start = stoi(argv[1]);
        int end = stoi(argv[2]);

        int writePipe = STDOUT_FILENO;  
        findPrimesInRange(start, end, writePipe);
        return 0;
    }

    int pipes[NUM_PROCESSES][2];

    for (int i = 0; i < NUM_PROCESSES; i++) {
        if (pipe(pipes[i]) == -1) {
            return 1;
        }
    }

    for (int i = 0; i < NUM_PROCESSES; i++) {
        int start = i * RANGE + 1;
        int end = (i + 1) * RANGE;

        pid_t pid = fork();
        if (pid == -1) {
            return 1;
        }

        if (pid == 0) { 
            close(pipes[i][0]);  

      
            if (dup2(pipes[i][1], STDOUT_FILENO) == -1) {
                
                return 1;
            }

            string command = string(argv[0]) + " " + to_string(start) + " " + to_string(end);
            execlp(argv[0], argv[0], to_string(start).c_str(), to_string(end).c_str(), (char*)NULL);

            return 1;
        }
    }

    
    cout << "Prime numbers up to 10,000:\n";
    char buffer[BUFFER_SIZE];
    for (int i = 0; i < NUM_PROCESSES; i++) {
        close(pipes[i][1]);  
        ssize_t bytesRead;
        cout << "Data received from process " << i + 1 << "...\n";
        while ((bytesRead = read(pipes[i][0], buffer, BUFFER_SIZE - 1)) > 0) {
            buffer[bytesRead] = '\0';
            cout << buffer;
            if (string(buffer).find("*") != string::npos) break;
        }
        close(pipes[i][0]);  
    }

    
    for (int i = 0; i < NUM_PROCESSES; i++) {
        wait(NULL);
    }

    return 0;
}
